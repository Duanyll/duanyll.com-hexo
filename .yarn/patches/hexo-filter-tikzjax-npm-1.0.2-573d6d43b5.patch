diff --git a/dist/common.js b/dist/common.js
index 7c3c4b7abd752caab80d5eb9fa05874b98c180a5..8208e2a922d8a45cf4f797d8220b4c6af0c11332 100644
--- a/dist/common.js
+++ b/dist/common.js
@@ -14,7 +14,7 @@ exports.defaultConfig = {
 /**
  * A local storage for caching rendered SVGs.
  */
-exports.localStorage = new node_localstorage_1.LocalStorage((0, path_1.join)(__dirname, '../.cache'));
+exports.localStorage = new node_localstorage_1.LocalStorage((0, path_1.join)(process.cwd(), '.cache', 'tikzjax'));
 /**
  * Calculate the MD5 hash of a string. Used for cache key.
  */
diff --git a/dist/render-tikzjax.js b/dist/render-tikzjax.js
index a466a7185a1a9f4e096112fa887226e1cbced59f..acb3d737fc1b2140f9e5beb71c48fe769e1d52e2 100644
--- a/dist/render-tikzjax.js
+++ b/dist/render-tikzjax.js
@@ -20,19 +20,24 @@ async function renderTikzjax(data) {
     const logPrefix = '[hexo-filter-tikzjax]';
     const debug = (...args) => this.log.debug.apply(this.log, [logPrefix, ...args]);
     const error = (...args) => this.log.error.apply(this.log, [logPrefix, ...args]);
+    let preamble = "";
+    if (data["header-includes"]) {
+        preamble = data["header-includes"];
+    }
     queue_1.default.setLogger({ debug, error });
     // Find all TikZ code blocks in Markdown source.
-    const regex = /```tikz([\s\S]+?)```/g;
+    const regex = /```{=latex}([\s\S]+?)```/g;
     const matches = data.content.matchAll(regex);
     for await (const match of matches) {
         // Generate a hash for each TikZ code block as its cache key.
         const hash = (0, common_1.md5)(JSON.stringify(match[0]) + JSON.stringify(config));
         let svg = common_1.localStorage.getItem(hash);
         if (!svg) {
-            const input = match[1]?.trim();
-            if (!input) {
+            let input = match[1]?.trim();
+            if (!input || !input.includes('tikz')) {
                 continue;
             }
+            input = `${preamble}\n\\begin{document}\n${input}\n\\end{document}`;
             // Since `node-tikzjax` does not allow concurrent calls,
             // we have to use a task queue to make sure that only one call is running at a time.
             // This could be a bottleneck when generating a large number of posts.
